plotGRanges = function(x) plotRanges(ranges(x))
plotGRanges(x)
library(ph525x)
plotGRanges = function(x) plotRanges(ranges(x))
plotGRanges(x)
plotGRanges(x)
par(mfrow=c(2,2))
par(mfrow=c(2,1))
x = GRanges("chr1", IRanges(c(1,101),c(50,150)), strand=c("+","-"))
ranges(x)
plotGRanges = function(x) plotRanges(ranges(x))
plotGRanges(x)
resize(x,1)
plotGRanges(x)
x = GRanges("chr1", IRanges(c(1,101),c(50,150)), strand=c("+","-"))
ranges(x)
plotGRanges = function(x) plotRanges(ranges(x))
plotGRanges(x)
resize(x,1)
plotGRanges(resize(x,1) )
x = GRanges("chr1", IRanges(c(101,201,401,501),c(150,250,450,550)), strand="+")
y = GRanges("chr1", IRanges(c(101,221,301,401,541),c(150,250,350,470,550)), strand="+")
GRangesList(x,y)
c(x,y)
x %over% y
disjoin(x %over% y)
disjoin(c(x %over% y))
disjoin(c(x,y))
IRanges(start=101, end=200)*2
# QUESTION 2.3.2
# Define an integer range starting at 101 and ending at 200. If we use the operation narrow(x, start=20), what is the new starting point of the range?
x = IRanges(start=101, end=200)
narrow(x, start=20)
# QUESTION 2.3.3
# Define an integer range starting at 101 and ending at 200. If we use the operation +25, what is the width of the resulting range?
IRanges(start=101, end=200)+25
# QUESTION 2.3.4
# Define an IRanges with starts at 1,11,21 and ends at 3,15,27. width() gives the widths for each range. What is the sum of the widths of all the ranges?
sum(width(IRanges(start=c(1,11,21), end=c(3,15,27))))
# QUESTION 2.3.5  (1 punto posible)
# Define an IRanges object, x, with the following set of ranges:
#  Starts at 101,106,201,211,221,301,306,311,351,361,401,411,501
#  Ends at 150,160,210,270,225,310,310,330,390,380,415,470,510
# Plot these ranges using the plotRanges function in the ph525x package. You can install this library if you have not done so already, with the command: install_github("genomicsclass/ph525x")
# What is the total width from 101 to 510 which is not covered by ranges in x?
x <- IRanges(start=c(101,106,201,211,221,301,306,311,351,361,401,411,501), end=c(150,160,210,270,225,310,310,330,390,380,415,470,510))
install_github("genomicsclass/ph525x")
library(ph525x)
plotRanges(x)
sum(width(gaps(x)))
# QUESTION 2.3.6
#How many disjoint ranges are contained within the ranges in 'x' from the previous question? By disjoint ranges, we mean the following: for two ranges [1,10] and [6,15], there are three disjoint ranges contained within: [1,5], [6,10], and [11,15].
disjoin(x)
par(mfrow=c(2,1))
plotRanges(x)
resize(x,1)
plotRanges(x, xlim=c(100,500))
## 4
x = GRanges("chr1", IRanges(c(1,101),c(50,150)), strand=c("+","-"))
ranges(x)
plotGRanges = function(x) plotRanges(ranges(x))
plotGRanges(x)
resize(x,1)
plotGRanges(resize(x,1) )
# QUESTION 2.4.2
x = GRanges("chr1", IRanges(c(101,201,401,501),c(150,250,450,550)), strand="+")
y = GRanges("chr1", IRanges(c(101,221,301,401,541),c(150,250,350,470,550)), strand="+")
GRangesList(x,y)
c(x,y)
sum(width(gaps(x)))
sum(width(gaps(c(x,y))))
disjoin(c(x,y))
101-550
550-101
449-280
sum(width(gaps(c(x,y))))
650/20
z <- range(ranges(x))
x %over% y
x %over% z
z %over% x
library(devtools)
install_github("genomicsclass/maPooling")
library(Biobase)
library(maPooling)
data(maPooling)
e = maPooling;head(pData(e))
data(maPooling)
pd=pData(maPooling)
pooled=which(rowSums(pd)==12)
individuals=which(rowSums(pd)==1)
##remove replicates
individuals=individuals[-grep("tr",names(individuals))]
pool = exprs(maPooling)[,pooled];indiv = exprs(maPooling)[,individuals]
strain= ifelse(grepl("a",rownames(pData(maPooling))),0,1)
g_pool = strain[pooled]
g_indiv = strain[individuals]
require(genefilter)
rowttest(pool,g_pool)
source("http://bioconductor.org/biocLite.R")
biocLite("genefilter")
require(genefilter)
rowttest(pool,g_pool)
library(genefilter)
rowttest(pool,g_pool)
rowttests(pool,g_pool)
g_pool
rowttests(pool,as.factor(g_pool))
names(rowttests(pool,as.factor(g_pool)))
qvalue(rowttests(pool,as.factor(g_pool))$p.val)
help(qvalue)
qvalues(rowttests(pool,as.factor(g_pool))$p.val)
qvalue(rowttests(pool,as.factor(g_pool))$p.val)
library(qvalue)
qvalue(rowttests(pool,as.factor(g_pool))$p.val)
qvalue(rowttests(pool,as.factor(g_pool))$p.val)$q.val
names(qvalue(rowttests(pool,as.factor(g_pool))$p.val))
mean(qvalue(rowttests(pool,as.factor(g_pool))$p.val)$qval)
sum(qvalue(rowttests(pool,as.factor(g_pool))$p.val)$qval>0.05)
length(qvalue(rowttests(pool,as.factor(g_pool))$p.val)$qval>0.05)
sum(qvalue(rowttests(pool,as.factor(g_pool))$p.val)$qval>0.05)/15923
sum(qvalue(rowttests(individuals,as.factor(g_indiv))$p.val)$qval>0.05)/15923
individuals
pval <- rowttests(pool,as.factor(g_pool))$p.val
pval <- rowttests(pool,as.factor(g_pool))$p.val
sum(qvalue(pval)$qval>0.05)/length(pval)
sum(qvalue(pval)$qval<0.05)/length(pval)
mean(qvalue(pval)$qval<0.05)
mean(qvalue(pval)$qval<0.05)
qvalue(pval)$qval<0.05
sum(qvalue(pval)$qval<0.05)
library(devtools)
install_github("genomicsclass/maPooling")
library(Biobase)
library(maPooling)
data(maPooling)
e = maPooling;head(pData(e))
data(maPooling)
pd=pData(maPooling)
pooled=which(rowSums(pd)==12)
individuals=which(rowSums(pd)==1)
##remove replicates
pool = exprs(maPooling)[,pooled];indiv = exprs(maPooling)[,individuals]
strain= ifelse(grepl("a",rownames(pData(maPooling))),0,1)
g_pool = strain[pooled]
g_indiv = strain[individuals]
## QUESTION 4.1.1  (1 punto posible)
# Compute the standard deviations for each gene for the strain defined by strain==1 across technical replicates and biological replicates.
# For what proportion of genes is the estimated biological variability larger than the estimated technical variability
apply(pool[,which(g_pool==1)],1,sd)
e
pooled
individuals=which(rowSums(pd)==1)
individuals
pd
apply(exprs(e)[,which(pd==1)],1,sd)
individuals
individuals
individuals=individuals[-grep("tr",names(individuals))]
individuals
pool = exprs(maPooling)[,pooled];indiv = exprs(maPooling)[,individuals] ## tecniques
pool
strain= ifelse(grepl("a",rownames(pData(maPooling))),0,1)
strain
apply(exprs(e)[,which(strain==1)],1,sd)
sum(apply(pool[,which(g_pool==1)],1,sd)<apply(exprs(e)[,which(strain==1)],1,sd) )
length(unlist(apply(exprs(e)[,which(strain==1)],1,sd)))
sum(apply(pool[,which(g_pool==1)],1,sd)<apply(exprs(e)[,which(strain==1)],1,sd) )\ 15923
sum(apply(pool[,which(g_pool==1)],1,sd)<apply(exprs(e)[,which(strain==1)],1,sd) )/ 15923
sum(apply(pool[,which(g_pool==1)],1,sd)>apply(exprs(e)[,which(strain==1)],1,sd) )/ 15923
indiv[,g_indiv==1]
mean(apply(pool[,which(g_pool==1)],1,sd)>apply(exprs(e)[,which(strain==1)],1,sd) )
dim(exprs(e))
mean(apply(pool[,which(g_pool==1)],1,sd)>apply(exprs(e)[,which(g_individ==1)],1,sd) )
mean(apply(pool[,which(g_pool==1)],1,sd)>apply(exprs(e)[,which(g_indiv==1)],1,sd) )
mean(apply(pool[,which(g_pool==1)],1,sd)<apply(exprs(e)[,which(g_indiv==1)],1,sd) )
length(g_indiv)
indiv = exprs(maPooling)[,individuals] ## bio
mean(apply(pool[,which(g_pool==1)],1,sd)<apply(individ[,which(g_indiv==1)],1,sd) )
mean(apply(pool[,which(g_pool==1)],1,sd)<apply(indiv[,which(g_indiv==1)],1,sd) )
indiv[,which(g_indiv==1)]
dim(indiv)
dim(g_indiv)
length(g_indiv)
data(maPooling)
e = maPooling;head(pData(e))
data(maPooling)
pd=pData(maPooling)
pooled=which(rowSums(pd)==12)
individuals=which(rowSums(pd)==1)
##remove replicates
individuals=individuals[-grep("tr",names(individuals))]
pool = exprs(maPooling)[,pooled]## tecniques
indiv = exprs(maPooling)[,individuals] ## bio
strain= ifelse(grepl("a",rownames(pData(maPooling))),0,1)
g_pool = strain[pooled]
g_indiv = strain[individuals]
## QUESTION 4.1.1  (1 punto posible)
# Compute the standard deviations for each gene for the strain defined by strain==1 across technical replicates and biological replicates.
# For what proportion of genes is the estimated biological variability larger than the estimated technical variability
mean(apply(pool[,which(g_pool==1)],1,sd) < apply(indiv[,which(g_indiv==1)],1,sd) )
sum(qvalue(pval)$qval<0.05)
qval <- qvalue(pval)$qval
which(qval<0.05)
qvalrep <- which(qval<0.05)
which.qval<- which(qval<0.05)
indiv
pval <- rowttests(indiv[which.qval,],as.factor(g_indiv))$p.val
mean(pval)
library(genefilter)
library(qvalue)
pvals = rowttests(indiv,factor(g_indiv))$p.value
qvals = qvalue(pvals)$qvalue
fit(lmFit(rma(indiv)),design=model.matrix(~g_indiv))
fit <- lmFit(rma(indiv),design=model.matrix(~g_indiv))
library(limma)
fit <- lmFit(rma(indiv),design=model.matrix(~g_indiv))
library(affy)
fit <- lmFit(rma(indiv),design=model.matrix(~g_indiv))
rma(indiv)
indiv
fit <- lmFit(indiv,design=model.matrix(~g_indiv))
ebayes(fit)
fit <- ebayes(fit)
tt <- topTable(fit)
fit <- ebayes(fit)
tt <- topTable(fit)
tt <- topTable(fit,coef=2)
class(fot)
class(fit)
library(limma)
fit <- lmFit(indiv,design=model.matrix(~g_indiv))
fit <- ebayes(fit)
tt <- topTable(fit)
fit <- lmFit(indiv,design=model.matrix(~g_indiv))
fit <- ebayes(fit)
names(fit)
qvalues(fit$p.val)
qvalue(fit$p.val)
qvalModT <- qvalue(fit$p.val)$qval
qvals
qvalModT /qvals
sum(qvalModT<0.05) /sum(qval<0.05)
sum(qval<0.05)/sum(qvalModT<0.05)
pvals = rowttests(indiv,factor(g_indiv))$p.value
qvals = qvalue(pvals)$qvalue
# Now use the limma package to obtain p-values using the moderated t-tests provided by the ebayes function. Obtain q-vaues From these by applying the qvalue function.
fit <- lmFit(indiv,design=model.matrix(~g_indiv))
fit <- ebayes(fit)
qvalModT <-qvalue(fit$p.val)$qval
sum(qval<0.05)/sum(qvalModT<0.05)
sum(qvals<0.05)/sum(qvalModT<0.05)
sum(qvalModT<0.05)
sum(qvals<0.05)
topTable(fit)
class(fit) <- "MArrayLM"
topTable(fit)
fit <- lmFit(indiv,design=model.matrix(~g_indiv))
eb = ebayes(fit)
pvals2= eb$p.value[,2]
qvals2= qvalue(pvals2)$qvalue
sum( qvals2<0.05 & qvals<0.05)/sum(qvals<0.05)
installifnot <- function (pckgName) {
if (!(require(pckgName, character.only = TRUE))){
biocLite(pckgName)
require(pckgName, character.only = TRUE)
}
}
loadPackages<- function(TRYTOINSTALL,
chipPackAvailable, platformDesignPackAvailable,
chipPackage,
runMultiCore)
{
if(TRY2INSTALL)
{}
source("http://bioconductor.org/biocLite.R")
installifnot("Biobase")
{{}}
}}}
source("http://bioconductor.org/biocLite.R")
installifnot("Biobase")
installifnot("xtable")
installifnot("annotate")     # Necessari per la funcio 'htmlPage'
installifnot("AnnotationDbi")
installifnot("affy")
installifnot("limma")
installifnot("VennDiagram")
installifnot("simpleaffy")
installifnot("affyQCReport")
installifnot("affyPLM")
installifnot("affycoretools")
installifnot("rgl")
installifnot("KEGG.db")
installifnot("GO.db")
installifnot("annaffy")
installifnot("gplots")
installifnot("GOstats")
installifnot("marray")   # necessari pel PowerAnalysis
installifnot("convert")  # necessari pel PowerAnalysis
installifnot("SSPA")     # necessari pel PowerAnalysis
#installifnot("ssize")    # alternativa a SSPA per un PowerAnalysis diferent (de moment descartat)
installifnot("statmod")
installifnot("vsn")
installifnot("arrayQualityMetrics")
installifnot("SortableHTMLTables")
installifnot("Biobase")
installifnot("xtable")
installifnot("annotate")     # Necessari per la funcio 'htmlPage'
installifnot("AnnotationDbi")
installifnot("affy")
installifnot("limma")
installifnot("simpleaffy")
installifnot("affyQCReport")
installifnot("affyPLM")
installifnot("affycoretools")
installifnot("rgl")
installifnot("KEGG.db")
installifnot("GO.db")
installifnot("annaffy")
installifnot("gplots")
installifnot("GOstats")
installifnot("marray")   # necessari pel PowerAnalysis
installifnot("convert")  # necessari pel PowerAnalysis
installifnot("SSPA")     # necessari pel PowerAnalysis
#installifnot("ssize")    # alternativa a SSPA per un PowerAnalysis diferent (de moment descartat)
installifnot("statmod")
installifnot("vsn")
installifnot("arrayQualityMetrics")
34*6
2014+12+18
204+12+18
sym <- rep(c("2-r","653-7"),50)
1324-500
prostate <- read.delim("~/Dropbox (VHIR)/UEB-compartida/Formacio_VHIR/PenDrive/dades/prostate.csv")
View(prostate)
attach(prostate)
lm(lpsa~.)
dettach(prostate)
detach(prostate)
lm(lpsa ~ ., data=prostate)
lm.pr <- lm(lpsa ~ ., data=prostate)
summary(lm.pr)
lm.pr <- lm(lpsa ~ age + gleason + lbph + lcavol + lcp + lweight +
pgg45, data=prostate)
summary(lm.pr)
cor(prostate)
str(prostate)
summary(prostate)
pairs(prostate)
vif(lm.pr)
VIF(lm.pr)
require(VIF)
install.packages("VIF")
require(VIF)
vif(lm.pr)
vif(summary(lm.pr))
(lm.pr)
vif(lm.pr)
lm.pr <- lm(lpsa ~ age + gleason + lbph + lcavol + lcp + lweight +
pgg45, data=prostate)
lm.pr <- lm(lpsa ~ age + gleason + lbph + lcavol + lcp + lweight + pgg45, data=prostate)
vif(lm.pr)
install.packages("fmsb")
require(fmsb)
VIF(lm.pr)
vif(lm.pr)
outlierTest(lm.pr)
require(epitools)
vif(lm.pr)
require(gdata)
vif(lm.pr)
require(plyr)
vif(lm.pr)
require(SDMTools)
vif(lm.pr)
prostate <- read.delim("~/Dropbox (VHIR)/UEB-compartida/Formacio_VHIR/PenDrive/dades/prostate.csv")
View(prostate)
osteoporosis <- read.delim2("~/Dropbox (VHIR)/UEB-compartida/Formacio_VHIR/PenDrive/dades/osteoporosis.csv")
View(osteoporosis)
names(osteoporosis)
str(osteoporosis)
lm(bua ~ talla + peso + imc + edad + menop)
lm(bua ~ talla + peso + imc + edad + menop,data =osteoporosis)
fit1 <- lm(bua ~ talla + peso + imc + edad + menop,data =osteoporosis)
summary(fit1)
confint(fit1)
plot(fit1)
vif(fit1)
example(vif)
names(fit1)
names(summary(fit1))
sumfit1 <- summary(fit1)
sumfit1$r.squared
AIC(sumfit1)
aic(sumfit1)
AIC(fit1)
pairs(osteoporosis[,c("talla","peso","imc","edad","menop")])
fit1 <- lm(bua ~ talla + peso  + edad + menop,data =osteoporosis)
fit1 <- lm(bua ~ talla + peso + imc + edad + menop,data =osteoporosis)
sumfit1 <- summary(fit1)
confint(fit1)
sumfit1$r.squared
AIC(fit1)
plot(fit1)
fit2 <- lm(bua ~ talla + peso  + edad + menop,data =osteoporosis)
summary(fit2)
lm(bua ~ .,data =osteoporosis)
summary(lm(bua ~ .,data =osteoporosis))
names(osteoporosis)
fit1 <- lm(bua ~ talla + peso + imc + edad + menop + clasific,data =osteoporosis)
sumfit1 <- summary(fit1)
confint(fit1)
sumfit1$r.squared
AIC(fit1)
sumfit1
fit2 <- lm(bua ~ talla + peso  + edad + menop + clasific,data =osteoporosis)
summary(fit2)
stepwise(fit1, direction="forward/backward",criterion="AIC")
install.package("stepwise")
install.packages("stepwise")
require(stepwise)
stepwise(fit1, direction="forward/backward",criterion="AIC")
require(stats)
stepwise(fit1, direction="forward/backward",criterion="AIC")
step(fit1, direction="forward/backward",criterion="AIC")
step(fit1, direction="backward",criterion="AIC")
step(fit2, direction="backward",criterion="AIC")
step(fit2, direction="forward",criterion="AIC")
fit3 <- lm(bua ~  + peso  + edad +  clasific,data =osteoporosis)
predict(fit3, list(peso=55,edad=25, clasific ="OSTEOPOROSIS"))
fit1 <- lm(edad ~ talla + peso + imc + bua + menop + clasific,data =osteoporosis)
sumfit1 <- summary(fit1)
sumfit1
confint(fit1)
sumfit1$r.squared
AIC(fit1)
plot(fit1)
pairs(osteoporosis[,c("talla","peso","imc","edad","menop")])
pairs(osteoporosis[,c("talla","peso","imc","bua","menop")])
fit2 <- lm(edad ~ talla + peso  + bua + menop + clasific,data =osteoporosis)
summary(fit2)
names(osteoporosis)
str(osteoporosis)
fit1 <- lm(bua ~ talla + peso + imc + edad + menop + clasific,data =osteoporosis)
sumfit1 <- summary(fit1)
confint(fit1)
sumfit1$r.squared
AIC(fit1)
pairs(osteoporosis[,c("talla","peso","imc","edad","menop")])
vif(fit1) ## no funciona
fit2 <- lm(bua ~ talla + peso  + edad + menop + clasific,data =osteoporosis)
summary(fit2)
sumfit2 <- summary(fit2)
sumfit2$r.squared
AIC(fit2)
plot(fit2)
fit2 <- lm(bua ~ talla + peso  + edad +  clasific,data =osteoporosis)
sumfit2 <- summary(fit2)
plot(fit2)
summary(bua)
summary(osteoporosis$bua)
plot(fit3)
fit3 <- lm(bua ~ peso  + edad +  clasific,data =osteoporosis)
plot(fit3)
example(lm)
plot(fit3)
par(mfrow=c(2,2))
plot(fit3)
source("http://bioconductor.org/biocLite.R")
biocLite()
installifnot <- function(package) {if (!require("pacman")) install.packages("pacman")}
installifnot <- function(package) {if (!require(package)) install.packages(package)}
installifnot("RMongo")
orderdf_by_vector <- function(df,target,name){
df$name <- reorder.factor(df$name, new.order=target)
df %>% arrange(name)}
installifnot <- function (pckgName) {
if (!(require(pckgName, character.only = TRUE))){
install.packages(pckgName)
require(pckgName, character.only = TRUE)
}
}
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("/home/miriam/")
create("cats")
library('devtools')
source("https://raw.githubusercontent.com/miriamMota/scripts/master/installifnot.R")
installifnot('StreamMetabolism')
install_github(repo = 'hilaryparker/hilary')
library('hilary')
source("https://raw.githubusercontent.com/miriamMota/scripts/master/installifnot.R")
installifnot("devtools")
installifnot("roxygen2")
setwd ("/home/miriam/")
create("cats2")
setwd("/home/miriam/scripts/Estadistica/")
install("reclass")
source("https://raw.githubusercontent.com/miriamMota/scripts/master/installifnot.R")
installifnot("devtools")
installifnot("roxygen2")
setwd("/home/miriam/scripts/Estadistica/")
install("reclass")
?reclass
setwd("/home/miriam/scripts/Estadistica/")
setwd("./reclass")
document()
setwd("/home/miriam/scripts/Estadistica/")
install("reclass")
?reclass
