fit <- lmFit(rma(indiv),design=model.matrix(~g_indiv))
rma(indiv)
indiv
fit <- lmFit(indiv,design=model.matrix(~g_indiv))
ebayes(fit)
fit <- ebayes(fit)
tt <- topTable(fit)
fit <- ebayes(fit)
tt <- topTable(fit)
tt <- topTable(fit,coef=2)
class(fot)
class(fit)
library(limma)
fit <- lmFit(indiv,design=model.matrix(~g_indiv))
fit <- ebayes(fit)
tt <- topTable(fit)
fit <- lmFit(indiv,design=model.matrix(~g_indiv))
fit <- ebayes(fit)
names(fit)
qvalues(fit$p.val)
qvalue(fit$p.val)
qvalModT <- qvalue(fit$p.val)$qval
qvals
qvalModT /qvals
sum(qvalModT<0.05) /sum(qval<0.05)
sum(qval<0.05)/sum(qvalModT<0.05)
pvals = rowttests(indiv,factor(g_indiv))$p.value
qvals = qvalue(pvals)$qvalue
# Now use the limma package to obtain p-values using the moderated t-tests provided by the ebayes function. Obtain q-vaues From these by applying the qvalue function.
fit <- lmFit(indiv,design=model.matrix(~g_indiv))
fit <- ebayes(fit)
qvalModT <-qvalue(fit$p.val)$qval
sum(qval<0.05)/sum(qvalModT<0.05)
sum(qvals<0.05)/sum(qvalModT<0.05)
sum(qvalModT<0.05)
sum(qvals<0.05)
topTable(fit)
class(fit) <- "MArrayLM"
topTable(fit)
fit <- lmFit(indiv,design=model.matrix(~g_indiv))
eb = ebayes(fit)
pvals2= eb$p.value[,2]
qvals2= qvalue(pvals2)$qvalue
sum( qvals2<0.05 & qvals<0.05)/sum(qvals<0.05)
installifnot <- function (pckgName) {
if (!(require(pckgName, character.only = TRUE))){
biocLite(pckgName)
require(pckgName, character.only = TRUE)
}
}
loadPackages<- function(TRYTOINSTALL,
chipPackAvailable, platformDesignPackAvailable,
chipPackage,
runMultiCore)
{
if(TRY2INSTALL)
{}
source("http://bioconductor.org/biocLite.R")
installifnot("Biobase")
{{}}
}}}
source("http://bioconductor.org/biocLite.R")
installifnot("Biobase")
installifnot("xtable")
installifnot("annotate")     # Necessari per la funcio 'htmlPage'
installifnot("AnnotationDbi")
installifnot("affy")
installifnot("limma")
installifnot("VennDiagram")
installifnot("simpleaffy")
installifnot("affyQCReport")
installifnot("affyPLM")
installifnot("affycoretools")
installifnot("rgl")
installifnot("KEGG.db")
installifnot("GO.db")
installifnot("annaffy")
installifnot("gplots")
installifnot("GOstats")
installifnot("marray")   # necessari pel PowerAnalysis
installifnot("convert")  # necessari pel PowerAnalysis
installifnot("SSPA")     # necessari pel PowerAnalysis
#installifnot("ssize")    # alternativa a SSPA per un PowerAnalysis diferent (de moment descartat)
installifnot("statmod")
installifnot("vsn")
installifnot("arrayQualityMetrics")
installifnot("SortableHTMLTables")
installifnot("Biobase")
installifnot("xtable")
installifnot("annotate")     # Necessari per la funcio 'htmlPage'
installifnot("AnnotationDbi")
installifnot("affy")
installifnot("limma")
installifnot("simpleaffy")
installifnot("affyQCReport")
installifnot("affyPLM")
installifnot("affycoretools")
installifnot("rgl")
installifnot("KEGG.db")
installifnot("GO.db")
installifnot("annaffy")
installifnot("gplots")
installifnot("GOstats")
installifnot("marray")   # necessari pel PowerAnalysis
installifnot("convert")  # necessari pel PowerAnalysis
installifnot("SSPA")     # necessari pel PowerAnalysis
#installifnot("ssize")    # alternativa a SSPA per un PowerAnalysis diferent (de moment descartat)
installifnot("statmod")
installifnot("vsn")
installifnot("arrayQualityMetrics")
34*6
2014+12+18
204+12+18
sym <- rep(c("2-r","653-7"),50)
1324-500
prostate <- read.delim("~/Dropbox (VHIR)/UEB-compartida/Formacio_VHIR/PenDrive/dades/prostate.csv")
View(prostate)
attach(prostate)
lm(lpsa~.)
dettach(prostate)
detach(prostate)
lm(lpsa ~ ., data=prostate)
lm.pr <- lm(lpsa ~ ., data=prostate)
summary(lm.pr)
lm.pr <- lm(lpsa ~ age + gleason + lbph + lcavol + lcp + lweight +
pgg45, data=prostate)
summary(lm.pr)
cor(prostate)
str(prostate)
summary(prostate)
pairs(prostate)
vif(lm.pr)
VIF(lm.pr)
require(VIF)
install.packages("VIF")
require(VIF)
vif(lm.pr)
vif(summary(lm.pr))
(lm.pr)
vif(lm.pr)
lm.pr <- lm(lpsa ~ age + gleason + lbph + lcavol + lcp + lweight +
pgg45, data=prostate)
lm.pr <- lm(lpsa ~ age + gleason + lbph + lcavol + lcp + lweight + pgg45, data=prostate)
vif(lm.pr)
install.packages("fmsb")
require(fmsb)
VIF(lm.pr)
vif(lm.pr)
outlierTest(lm.pr)
require(epitools)
vif(lm.pr)
require(gdata)
vif(lm.pr)
require(plyr)
vif(lm.pr)
require(SDMTools)
vif(lm.pr)
prostate <- read.delim("~/Dropbox (VHIR)/UEB-compartida/Formacio_VHIR/PenDrive/dades/prostate.csv")
View(prostate)
osteoporosis <- read.delim2("~/Dropbox (VHIR)/UEB-compartida/Formacio_VHIR/PenDrive/dades/osteoporosis.csv")
View(osteoporosis)
names(osteoporosis)
str(osteoporosis)
lm(bua ~ talla + peso + imc + edad + menop)
lm(bua ~ talla + peso + imc + edad + menop,data =osteoporosis)
fit1 <- lm(bua ~ talla + peso + imc + edad + menop,data =osteoporosis)
summary(fit1)
confint(fit1)
plot(fit1)
vif(fit1)
example(vif)
names(fit1)
names(summary(fit1))
sumfit1 <- summary(fit1)
sumfit1$r.squared
AIC(sumfit1)
aic(sumfit1)
AIC(fit1)
pairs(osteoporosis[,c("talla","peso","imc","edad","menop")])
fit1 <- lm(bua ~ talla + peso  + edad + menop,data =osteoporosis)
fit1 <- lm(bua ~ talla + peso + imc + edad + menop,data =osteoporosis)
sumfit1 <- summary(fit1)
confint(fit1)
sumfit1$r.squared
AIC(fit1)
plot(fit1)
fit2 <- lm(bua ~ talla + peso  + edad + menop,data =osteoporosis)
summary(fit2)
lm(bua ~ .,data =osteoporosis)
summary(lm(bua ~ .,data =osteoporosis))
names(osteoporosis)
fit1 <- lm(bua ~ talla + peso + imc + edad + menop + clasific,data =osteoporosis)
sumfit1 <- summary(fit1)
confint(fit1)
sumfit1$r.squared
AIC(fit1)
sumfit1
fit2 <- lm(bua ~ talla + peso  + edad + menop + clasific,data =osteoporosis)
summary(fit2)
stepwise(fit1, direction="forward/backward",criterion="AIC")
install.package("stepwise")
install.packages("stepwise")
require(stepwise)
stepwise(fit1, direction="forward/backward",criterion="AIC")
require(stats)
stepwise(fit1, direction="forward/backward",criterion="AIC")
step(fit1, direction="forward/backward",criterion="AIC")
step(fit1, direction="backward",criterion="AIC")
step(fit2, direction="backward",criterion="AIC")
step(fit2, direction="forward",criterion="AIC")
fit3 <- lm(bua ~  + peso  + edad +  clasific,data =osteoporosis)
predict(fit3, list(peso=55,edad=25, clasific ="OSTEOPOROSIS"))
fit1 <- lm(edad ~ talla + peso + imc + bua + menop + clasific,data =osteoporosis)
sumfit1 <- summary(fit1)
sumfit1
confint(fit1)
sumfit1$r.squared
AIC(fit1)
plot(fit1)
pairs(osteoporosis[,c("talla","peso","imc","edad","menop")])
pairs(osteoporosis[,c("talla","peso","imc","bua","menop")])
fit2 <- lm(edad ~ talla + peso  + bua + menop + clasific,data =osteoporosis)
summary(fit2)
names(osteoporosis)
str(osteoporosis)
fit1 <- lm(bua ~ talla + peso + imc + edad + menop + clasific,data =osteoporosis)
sumfit1 <- summary(fit1)
confint(fit1)
sumfit1$r.squared
AIC(fit1)
pairs(osteoporosis[,c("talla","peso","imc","edad","menop")])
vif(fit1) ## no funciona
fit2 <- lm(bua ~ talla + peso  + edad + menop + clasific,data =osteoporosis)
summary(fit2)
sumfit2 <- summary(fit2)
sumfit2$r.squared
AIC(fit2)
plot(fit2)
fit2 <- lm(bua ~ talla + peso  + edad +  clasific,data =osteoporosis)
sumfit2 <- summary(fit2)
plot(fit2)
summary(bua)
summary(osteoporosis$bua)
plot(fit3)
fit3 <- lm(bua ~ peso  + edad +  clasific,data =osteoporosis)
plot(fit3)
example(lm)
plot(fit3)
par(mfrow=c(2,2))
plot(fit3)
source("http://bioconductor.org/biocLite.R")
biocLite()
installifnot <- function(package) {if (!require("pacman")) install.packages("pacman")}
installifnot <- function(package) {if (!require(package)) install.packages(package)}
installifnot("RMongo")
orderdf_by_vector <- function(df,target,name){
df$name <- reorder.factor(df$name, new.order=target)
df %>% arrange(name)}
installifnot <- function (pckgName) {
if (!(require(pckgName, character.only = TRUE))){
install.packages(pckgName)
require(pckgName, character.only = TRUE)
}
}
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("/home/miriam/")
create("cats")
library('devtools')
source("https://raw.githubusercontent.com/miriamMota/scripts/master/installifnot.R")
installifnot('StreamMetabolism')
install_github(repo = 'hilaryparker/hilary')
library('hilary')
source("https://raw.githubusercontent.com/miriamMota/scripts/master/installifnot.R")
installifnot("devtools")
installifnot("roxygen2")
setwd ("/home/miriam/")
create("cats2")
20*11
20*11*4.28
i=1
dat
<<echo=FALSE, results='hide',message=FALSE>>=
# include this code chunk as-is to set options
opts_chunk$set(comment = NA, prompt = TRUE, tidy = FALSE, fig.width = 7, fig.height = 7,echo = FALSE,message = FALSE,warning = FALSE)
Sys.setlocale("LC_TIME", "C")
@
<<packages>>=
require(xlsx)
require(qvalue)
require(xtable)
require(knitr)
require(stringr)
require(gtools)
require(gdata)
require(dplyr)
require(gplots)
require(lsr)
require(VennDiagram)
require(reshape)
require(readr)
if (!require(pvca)) biocLite("pvca")
library("Biobase")
require(ggplot2)
require(venneuler)
@
<<function>>=
reclass <- function(dat,nlev)
{
tipus <- apply(dat,2, function(x)
ifelse((dim(table(x)) < nlev ) | (sum(grepl("[a-z]",x)) > 0), "cat","cont")) ## comprobem cat o cont
for (i in 1:length(tipus)) ifelse(tipus[i] == "cont", dat[,i] <- as.numeric(as.character(dat[,i])), dat[,i] <- as.factor(dat[,i]))
return(dat)
}
reclass_lev <- function(dat,nlev)
{
tipus <- apply(dat,2, function(x)
ifelse((dim(table(x)) < nlev ), "cat","cont")) ## comprobem cat o cont
for (i in 1:length(tipus)) ifelse(tipus[i] == "cont", dat[,i] <- as.numeric(as.character(dat[,i])), dat[,i] <- as.factor(dat[,i]))
return(dat)
}
plotPCA <- function(X, labels=NULL, colors=NULL, var = "", dataDesc = "", scale=FALSE, formapunts = NULL, myCex = NULL, xmin = min(pcX$x[,1]) - 10, xmax=max(pcX$x[,1]) + 1, ymin = min(pcX$x[1,]) - 10 , ymax = max(pcX$x[1,]) + 1, ...)
{
pcX <- prcomp(t(X))
loads <- round(pcX$sdev ^ 2/sum(pcX$sdev ^ 2)*100,1)
xlab <- c(paste("PC1",loads[1],"%"))
ylab <- c(paste("PC2",loads[2],"%"))
if (is.null(colors)) colors = colores
plot(pcX$x[,1:2],xlab = xlab,ylab = ylab,
xlim = c(xmin,xmax),ylim = c(ymin,ymax),pch = formapunts, col = colors)
text(pcX$x[,1],pcX$x[,2],labels,pos = 3,cex = myCex, col = colors)
title(paste(var, dataDesc, sep = " "), cex = 0.2)
}
numGeneChanged <- function(filenames,comparisons, adj0=0.01, adj1=0.05, adj2=0.25, P1=0.01, P2=0.05)
{
dat <- lapply(paste("results/",filenames,sep=""), read.csv2,header=T,sep=",",row.names=1)
dat <- lapply(dat,reclass_lev,nlev=2)
res<-data.frame(lapply(dat, genesSelectable,adj0=adj0, adj1=adj1, adj2=adj2, P1=P1, P2=P2))
colnames(res) <- comparisons
row.names(res) <- c(paste("upReg-Adjusted-p-val", adj0, sep = " < "),
paste("downReg-Adjusted-p-val", adj0, sep = " < "),
paste("upReg-Adjusted-p-val", adj1, sep = " < "),
paste("downReg-Adjusted-p-val", adj1, sep = " < "),
paste("upReg-Adjusted-p-val", adj2, sep = " < "),
paste("downReg-Adjusted-p-val", adj2, sep = " < "),
paste("upReg-P value", P1, sep = " < "),
paste("downReg-P value", P1, sep = " < "),
paste("upReg-P value", P2, sep = " < "),
paste("downReg-P value", P2, sep = " < "))
write.csv2( res, file=paste("results/numProteinChanged",".csv",sep="") )
return(xtable(res, caption ="Resumen péptidos diferencialmente expresadas" ,label="tab:num"))
}
genesSelectable <- function (topTab, adj0=0.01, adj1=0.05, adj2=0.25, P1=0.01, P2=0.05)
{
upBelowAdj0 <- sum(topTab$Adj.p.val < adj0 & topTab$FC > 0 )
downBelowAdj0 <- sum(topTab$Adj.p.val < adj0 & topTab$FC < 0 )
upBelowAdj1 <- sum(topTab$Adj.p.val < adj1 & topTab$FC > 0 )
downBelowAdj1 <- sum(topTab$Adj.p.val < adj1 & topTab$FC < 0 )
upBelowAdj2 <- sum(topTab$Adj.p.val < adj2 & topTab$FC > 0 )
downBelowAdj2 <- sum(topTab$Adj.p.val < adj2 & topTab$FC < 0 )
upBelowP1 <- sum(topTab$P.value < P1 & topTab$FC > 0 )
downBelowP1 <- sum (topTab$P.value < P1 & topTab$FC < 0 )
upBelowP2 <- sum(topTab$P.value < P2 & topTab$FC > 0 )
downBelowP2 <- sum(topTab$P.value < P2 & topTab$FC < 0 )
return(c(upBelowAdj0 = upBelowAdj0, downBelowAdj0 = downBelowAdj0,
upBelowAdj1 = upBelowAdj1, downBelowAdj1 = downBelowAdj1,
upBelowAdj2 = upBelowAdj2, downBelowAdj2 = downBelowAdj2,
upBelowP1 = upBelowP1, downBelowP1 = downBelowP1,
upBelowP2 = upBelowP2, downBelowP2 = downBelowP2))
}
Intersect <- function (x) {
# Multiple set version of intersect
# x is a list
if (length(x) == 1) {
unlist(x)
} else if (length(x) == 2) {
intersect(x[[1]], x[[2]])
} else if (length(x) > 2){
intersect(x[[1]], Intersect(x[-1]))
}
}
Union <- function (x) {
# Multiple set version of union
# x is a list
if (length(x) == 1) {
unlist(x)
} else if (length(x) == 2) {
union(x[[1]], x[[2]])
} else if (length(x) > 2) {
union(x[[1]], Union(x[-1]))
}
}
Setdiff <- function (x, y) {
# Remove the union of the y's from the common x's.
# x and y are lists of characters.
xx <- Intersect(x)
yy <- Union(y)
setdiff(xx, yy)
}
require(VennDiagram) # XXXXXX
require(venneuler)   # XXXXXX
Venn_diag_3 <- function(filenames,pathfile,metPval,pval,plt=TRUE,pltPdf=TRUE,eul=FALSE,csv=TRUE){
files <- list()
list_genes_sel <- list()
for (i in 1:length(filenames)){
files[[i]] <-  read.csv(paste0(pathfile, filenames[i]))
colpval <- which(names(files[[i]]) == metPval)
list_genes_sel[[i]] <- as.character(files[[i]]$X[files[[i]][,colpval] < pval])
}
mainTitle <- paste0("Venn diagram (" , metPval, " < ", pval,")")
## Creating Venn Diagram
compName <- paste0(substr(filenames, start=10, stop=17),"_")
venn.plot <- venn.diagram(list_genes_sel,
category.names = compName,
fill = rainbow(length(compName)),
#fill = c("tomato", "orchid4", "turquoise3"),
alpha = 0.50,
resolution = 600,
cat.cex = 0.9,
main = mainTitle,
filename = NULL)
if(pltPdf){
pdf(paste0(pathfile,"VennDiagram",metPval,pval,".pdf"))
grid.draw(venn.plot)
dev.off()
}
if(plt){grid.draw(venn.plot)}
if(eul){
set <- NULL
for (i in 1: length(compName)){
set <- c(set, rep(compName[i],length(list_genes_sel[[i]])))
}
v <- venneuler(data.frame(elements=c(unlist(list_genes_sel)),
sets= set))
if(pltPdf){
pdf(paste0(pathfile,"VennEuler",metPval,pval,".pdf"))
plot(v)
dev.off()
}
if(plt){plot(v)}
}
names(list_genes_sel) <- compName
combs <-  unlist(lapply(1:length(list_genes_sel),
function(j) combn(names(list_genes_sel), j, simplify = FALSE)),
recursive = FALSE)
names(combs) <- sapply(combs, function(i) paste0(i, collapse = ""))
#str(combs)
elements <- lapply(combs, function(i) Setdiff(list_genes_sel[i], list_genes_sel[setdiff(names(list_genes_sel), i)]))
n.elements <- sapply(elements, length)
list_res <- list(elements= elements, n.elements=n.elements)
seq.max <- seq_len(max(n.elements))
mat <- sapply(elements, "[", i = seq.max)
mat[is.na(mat)] <- ""
vennElements <- rbind(t(data.frame(n.elements)),data.frame(mat))
if(csv) {
write.csv(vennElements,file="results/VennElements.csv",row.names=FALSE)
}
return(vennElements)
}
@
<<lectDades>>=
## matriu expressions
dat_prot <- read.xlsx2("dades/DATOS_traspose.xlsx",sheetName="Sheet3")
rownames(dat_prot) <- paste(dat_prot$Proteina,dat_prot$Peptido,sep="_")
dat <- dat_prot[,-c(1:2)]
dat <- reclass(dat,nlev= 10)
## Targets
targets <- read.csv("dades/targets.csv")
targets <- targets[order(targets$Diagnostico),]
targets$EdadCat <- quantileCut(targets$Edad,4)
targets$ColEdad[targets$EdadCat == levels(targets$EdadCat)[1]] <- "green"
targets$ColEdad[targets$EdadCat == levels(targets$EdadCat)[2]] <- "blue"
targets$ColEdad[targets$EdadCat == levels(targets$EdadCat)[3]] <- "red"
targets$ColEdad[targets$EdadCat == levels(targets$EdadCat)[4]] <- "gray"
targets$ColEdad <- as.factor(targets$ColEdad)
dat <- dat[,as.character(targets$ID)]
## order targets by names(dat)
#ord <- names(dat)
#targets$ID <- reorder.factor(targets$ID, new.order=ord)
#targets <- targets %>% arrange(ID)
# comprovació ordre
if( all(names(dat)== targets$ID)) {names(dat) <- targets$SampleName}
@
require(xlsx)
install.packages("rJava")
install.packages("rJava")
q()
install_github('miriamMota/scripts/Estadistica/multGGplot')
source("https://raw.githubusercontent.com/miriamMota/scripts/master/installifnot.R")
installifnot("devtools")
source("https://raw.githubusercontent.com/miriamMota/scripts/master/installifnot.R")
installifnot("devtools")
require("devtools")
install_github('miriamMota/scripts/Estadistica/multGGplot')
install_github('miriamMota/scripts/installifnot')
installifnot("roxygen2")
?installifnot
install_github('miriamMota/scripts/installifnot')
?installifnot
require("devtools")
require("roxygen2")
install_github('miriamMota/scripts/installifnot')
packages()
pkgDir <- "/home/miriam/scripts/Estadistica/"
setwd(pkgDir)
setwd("./multGGplot")
install("multGGplot")
setwd(pkgDir)
install("multGGplot")
?mulGGplot
